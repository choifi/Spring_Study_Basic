# 빈 스코프란?
스프링 빈이 존재할 수 있는 범위

[스프링은 다음과 같은 다양한 스코프를 지원한다.]

싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료깢기 유지되는 가장 넓은 범위의 스코프
프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프
웹 관련 스코프
-request : 웹 요청이 들어오고 나갈때까지 유지되는 스코프

-sesstion : 웹 세션이 생성되고 종료될 때까지 유지되는 스코프

-application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프

@Scope("prototype")
@Component
public class HelloBean {}
싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환한다.

프로토타입 스코프를 스프링 컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.

# 싱글톤 빈에서 프로토타입 빈 사용

스프링은 일반적으로 싱글톤 빈을 사용하므로, 싱글톤 빈이 프로토타입 빈을 사용하게 된다. 그런데 싱글톤 빈은 생성 시점에만 의존관계를 받기 때문에, 프로토타입 빈이 새로 생성되긴 하지만, 싱글톤 빈과 함께 계속 유지된다.

Q 프로토타입 빈을 주입 시점에만 새로 생성하는게 아니라, 사용할 때마다 새로 생성해서 사용하려면?

A Provider로 문제를 해결한다.

# 프로토타입 스코프 — 싱글톤 빈과 함께 사용시 Provider로 문제 해결
javax.inject.Provider라는 JSR-330 자바 표준을 사용하는 방법.

스프링 부트 3.0은 jakarta.inject.Provider를 사용한다.

@Autowired
private Provider<PrototypeBean> provider;
public int logic() {
 PrototypeBean prototypeBean = provider.get();
 prototypeBean.addCount();
 int count = prototypeBean.getCount();
 return count;
}
-Provider.get()을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
-provider의 get()을 호출하면 내부에서는 스프링 컨테이너를 통해 해당 빈을 찾아서 반환한다. (DL)

-provider는 DL정도의 기능만 제공한다.

# 웹 스코프
웹 스코프
-웹 스코프는 웹 환경에서만 동작

-웹 스코프는 프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관리한다. 따라서 종료 메서드가 호출된다.

웹 스코프의 종류
request, session, application, websocket

# request 스코프 예제
# ObjectProvider를 사용

ObjectProvider 덕분에 ObjectProvider.getObject() 를 호출하는 시점까지 request scope 빈의 생성을 지연할 수 있다.
# 프록시 사용

@Component
@Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
public class MyLogger {
}
적용 대상이 인터페이스가 아닌 클래스면 TARGET_CLASS 를 선택
적용 대상이 인터페이스면 INTERFACES 를 선택

프록시 모드를 사용하면, 스프링은 CGLIB이라는 라이브러리를 이용하여, 내 클래스를 상속 받은 프록시 객체를 만들어서 주입한다. 따라서 스프링 컨테이너가 생성되고 빈의 의존 관계를 주입할 때, 프록시 객체가 주입되는 것이다.

가짜 프록시 객체는, HTTP 요청이 들어왔을 때 내부에서 진짜 빈을 요청하는 위임 로직을 가지고 있다. 프록시 객체는 원본 클래스를 상속해서 만들어졌기 때문에, 이 객체를 사용하는 클라이언트 입장에서는 원본인지 아닌지 모르게 동일하게 사용할 수 있다.





